
'''import re
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.constants.courses import courses_by_age
from app.core.settings import settings
from app.keyboards import MainMenuKeyboard
from app.core.session import async_session_maker
from app.repositories.user_repository import UserRepository

router = Router()

class RegisterForm(StatesGroup):
    name = State()
    age = State()
    course = State()
    contact = State()

@router.message(F.text == "/register")
@router.message(F.text == "‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_register(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegisterForm.name)

@router.message(RegisterForm.name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name.replace(" ", "").isalpha() or len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterForm.age)

@router.message(RegisterForm.age)
async def get_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if not 3 <= age <= 100:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 3 –¥–æ 100.")
        return

    suitable_courses = []
    for age_group, courses in courses_by_age.items():
        if "‚Äì" in age_group:
            start, end = map(int, age_group.replace(" –ª–µ—Ç", "").split("‚Äì"))
            if start <= age <= end:
                suitable_courses.extend(courses)
        elif "+" in age_group:
            min_age = int(age_group.replace("+ –ª–µ—Ç", "").strip())
            if age >= min_age:
                suitable_courses.extend(courses)

    if not suitable_courses:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 3 –¥–æ 100):"
        )
        await state.set_state(RegisterForm.age)
        return

    await state.update_data(age=age)

    courses_map = {f"select_course_{i}": c for i, c in enumerate(suitable_courses)}
    await state.update_data(courses_map=courses_map)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course, callback_data=code)]
            for code, course in courses_map.items()
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:", reply_markup=keyboard)
    await state.set_state(RegisterForm.course)

@router.callback_query(F.data.startswith("select_course_"))
async def course_selected(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    course_code = callback.data
    courses_map = data.get("courses_map", {})

    course = courses_map.get(course_code)
    if not course:
        await callback.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await state.update_data(course=course)
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: <b>{course}</b>", parse_mode="HTML")
    await callback.message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(RegisterForm.contact)




@router.message(RegisterForm.contact, F.text.startswith("/"))
async def contact_cancel_on_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û–∫–µ–π, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=MainMenuKeyboard.get()
    )

@router.message(RegisterForm.contact, F.text.casefold().in_({"–æ—Ç–º–µ–Ω–∞", "cancel"}))
async def contact_cancel_on_word(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MainMenuKeyboard.get())

@router.message(RegisterForm.contact)
async def get_contact(message: types.Message, state: FSMContext):
    contact = message.text.strip()

    
    is_email = re.fullmatch(r"[a-zA-Z0-9._%+-]+@(gmail\.com|mail\.ru)", contact)
    is_phone = re.fullmatch(r"\+7\d{10}", contact)

    if not (is_email or is_phone):
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, tata@gmail.com –∏–ª–∏ tata@mail.ru) "
            "–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
        )
        return

    
    await state.update_data(contact=contact)
    data = await state.get_data()

    
    async with async_session_maker() as session:
        repo = UserRepository(session)
        await repo.get_or_create(
            telegram_id=message.from_user.id,
            name=data.get("name") or (message.from_user.full_name or "Unknown"),
        )
        await session.commit() 

   
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {data['name']}!\n"
        f"–¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –∫—É—Ä—Å: <b>{data['course']}</b>.\n"
        f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –ø–æ: {data['contact']}",
        parse_mode="HTML",
        reply_markup=MainMenuKeyboard.get()
    )

    
    admin_msg = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üìö –ö—É—Ä—Å: {data['course']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )

    try:
        await message.bot.send_message(settings.bot.admin_id, admin_msg, parse_mode="HTML")
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

   
    await state.clear()'''
import re
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.constants.courses import courses_by_age
from app.core.settings import settings
from app.keyboards import MainMenuKeyboard
from app.core.session import async_session_maker
from app.repositories.user_repository import UserRepository

router = Router()

class RegisterForm(StatesGroup):
    name = State()
    age = State()
    course = State()
    contact = State()

# --- —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
# 1) –ø–æ –∫–æ–º–∞–Ω–¥–µ/—Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–µ
@router.message(F.text.in_({"‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "/register"}))
async def start_register(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegisterForm.name)

# 2) –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ –∏–∑ /start (callback_data="register")
@router.callback_query(F.data == "register")
async def start_register_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegisterForm.name)

@router.message(RegisterForm.name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name.replace(" ", "").isalpha() or len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterForm.age)

@router.message(RegisterForm.age)
async def get_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if not 3 <= age <= 100:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 3 –¥–æ 100.")
        return

    suitable_courses = []
    for age_group, courses in courses_by_age.items():
        if "‚Äì" in age_group:
            start, end = map(int, age_group.replace(" –ª–µ—Ç", "").split("‚Äì"))
            if start <= age <= end:
                suitable_courses.extend(courses)
        elif "+" in age_group:
            min_age = int(age_group.replace("+ –ª–µ—Ç", "").strip())
            if age >= min_age:
                suitable_courses.extend(courses)

    if not suitable_courses:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 3 –¥–æ 100):"
        )
        await state.set_state(RegisterForm.age)
        return

    await state.update_data(age=age)

    courses_map = {f"select_course_{i}": c for i, c in enumerate(suitable_courses)}
    await state.update_data(courses_map=courses_map)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course, callback_data=code)]
            for code, course in courses_map.items()
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:", reply_markup=keyboard)
    await state.set_state(RegisterForm.course)

@router.callback_query(F.data.startswith("select_course_"))
async def course_selected(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    course_code = callback.data
    courses_map = data.get("courses_map", {})

    course = courses_map.get(course_code)
    if not course:
        await callback.message.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await state.update_data(course=course)
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: <b>{course}</b>", parse_mode="HTML")
    await callback.message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(RegisterForm.contact)

# --- –æ—Ç–º–µ–Ω–∞ –Ω–∞ —à–∞–≥–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
@router.message(RegisterForm.contact, F.text.startswith("/"))
async def contact_cancel_on_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–∫–µ–π, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=MainMenuKeyboard.get())

@router.message(RegisterForm.contact, F.text.casefold().in_({"–æ—Ç–º–µ–Ω–∞", "cancel"}))
async def contact_cancel_on_word(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MainMenuKeyboard.get())

# --- –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
@router.message(RegisterForm.contact)
async def get_contact(message: types.Message, state: FSMContext):
    contact = message.text.strip()

    # –±–µ–∑ SyntaxWarning
    is_email = re.fullmatch("[a-zA-Z0-9._%+-]+@(gmail\\.com|mail\\.ru)", contact)
    is_phone = re.fullmatch("\\+7\\d{10}", contact)

    if not (is_email or is_phone):
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, tata@gmail.com –∏–ª–∏ tata@mail.ru) "
            "–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
        )
        return

    await state.update_data(contact=contact)
    data = await state.get_data()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session_maker() as session:
        repo = UserRepository(session)
        await repo.get_or_create(
            telegram_id=message.from_user.id,
            name=data.get("name") or (message.from_user.full_name or "Unknown"),
        )
        await session.commit()

    # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {data['name']}!\n"
        f"–¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –∫—É—Ä—Å: <b>{data['course']}</b>.\n"
        f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –ø–æ: {data['contact']}",
        parse_mode="HTML",
        reply_markup=MainMenuKeyboard.get(),
    )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_msg = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üìö –ö—É—Ä—Å: {data['course']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )
    try:
        await message.bot.send_message(settings.bot.admin_id, admin_msg, parse_mode="HTML")
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()
